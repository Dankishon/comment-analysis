import sys
import os
import dash
from dash import dcc, html, Input, Output
import plotly.express as px
import pandas as pd

app = dash.Dash(
    __name__,
    external_stylesheets=[
        "/frontend/static/styles.css"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    ]
)


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../backend')))

from process_data import analyze_sentiments, load_json

# –°–æ–∑–¥–∞–Ω–∏–µ Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = dash.Dash(__name__)
app.title = "Text Analysis Dashboard"

# –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
TEST_FILE_PATH = os.path.join(BASE_DIR, 'data', 'test_vk_post.json')

# –ú–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.layout = html.Div([
    html.H1("Text Analysis Dashboard", style={"textAlign": "center", "color": "#4CAF50"}),
    html.P("Analyze social media texts with sentiment analysis.", style={"textAlign": "center"}),

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    html.Div([
        html.Button("Analyze Test Data", id="analyze-button", n_clicks=0, style={"margin": "10px", "padding": "10px", "backgroundColor": "#4CAF50", "color": "white"})
    ], style={"textAlign": "center"}),

    # –í—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    html.Div(id="dashboard-content"),

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    dcc.Tabs(id="tabs", value="positive", children=[
        dcc.Tab(label="üòä Positive Comments", value="positive", style={"color": "green"}),
        dcc.Tab(label="üòê Neutral Comments", value="neutral", style={"color": "blue"}),
        dcc.Tab(label="üò° Negative Comments", value="negative", style={"color": "red"}),
    ]),
    html.Div(id="comments-content")
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
@app.callback(
    Output("dashboard-content", "children"),
    Input("analyze-button", "n_clicks")
)
def update_dashboard(n_clicks):
    if n_clicks > 0:
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            data = load_json(TEST_FILE_PATH)
            processed_data = analyze_sentiments(data["items"])

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
            global df
            df = pd.DataFrame(processed_data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ["text", "sentiment_label"]
            for column in required_columns:
                if column not in df.columns:
                    raise ValueError(f"Missing required column: {column}")

            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
            sentiment_counts = df["sentiment_label"].value_counts().reset_index()
            sentiment_counts.columns = ["Sentiment", "Count"]
            fig = px.bar(sentiment_counts, x="Sentiment", y="Count", title="Sentiment Distribution", color="Sentiment")

            return html.Div([
                dcc.Graph(figure=fig)
            ])
        except Exception as e:
            return html.Div([
                html.H3("An error occurred during analysis", style={"color": "red"}),
                html.P(str(e))
            ])
    return html.Div([
        html.P("Click the button to analyze the test data.", style={"textAlign": "center"})
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@app.callback(
    Output("comments-content", "children"),
    Input("tabs", "value")
)
def display_comments(tab_value):
    if "df" not in globals():
        return html.Div([
            html.P("Please analyze the data first by clicking the 'Analyze Test Data' button.", style={"textAlign": "center", "color": "gray"})
        ])
    try:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        filtered_df = df[df["sentiment_label"] == tab_value]
        comments_list = filtered_df["text"].tolist()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if not comments_list:
            return html.Div([
                html.H3(f"No comments found for {tab_value.capitalize()} sentiment", style={"textAlign": "center"})
            ])

        return html.Div([
            html.H3(f"{tab_value.capitalize()} Comments", style={"textAlign": "center"}),
            html.Ul([html.Li(comment) for comment in comments_list], style={"padding": "10px"})
        ])
    except Exception as e:
        return html.Div([
            html.H3("An error occurred while displaying comments", style={"color": "red"}),
            html.P(str(e))
        ])

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app.run_server(debug=True)
